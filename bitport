#!/usr/bin/env python

import configparser
import requests
import argparse
import json
import sys
import os.path

APPLICATION_ID = 43764
SECRET = 'dipyhu21qu'
CONFIG_PATH = os.path.expanduser('~/.bitport.ini')
API_URL = 'https://api.bitport.io/v2'


def token_if_available():
    config = configparser.ConfigParser()
    config.read(CONFIG_PATH)
    return config['DEFAULT']['token']


def token():
    try:
        return token_if_available()
    except KeyError:
        print("Not authorized. Did you run --auth?")
        sys.exit(1)


def save_token(token):
    config = configparser.ConfigParser()
    config['DEFAULT']['token'] = token
    with open(CONFIG_PATH, 'w') as configfile:
        config.write(configfile)


def auth_headers():
    return {'Authorization': 'Bearer {}'.format(token())}


class AuthAction(argparse.Action):
    def __init__(self, nargs='?', **kw):
        super(AuthAction, self).__init__(nargs=nargs, **kw)

    def __call__(self, parser, namespace, values, option_string=None):
        if values:
            response = requests.post(
                API_URL + "/oauth2/access-token",
                data={
                    'client_id': APPLICATION_ID,
                    'client_secret': SECRET,
                    'grant_type': 'code',
                    'code': values})
            json = response.json()
            access_token = json['access_token']
            save_token(access_token)
            expires_in = json['expires_in']
            print("Authorized. Expires in {} seconds".format(expires_in))
        else:
            instructions = "Visit https://bitport.io/get-access for code, then run --auth [TOKEN]"
            try:
                token_if_available()
                print("Authorized. {} to re-authorize.".format(instructions))
            except BaseException:
                print("Not authorized. {} to authorize.".format(instructions))


class CloudAction(argparse.Action):
    def __init__(self, nargs=0, **kw):
        super(CloudAction, self).__init__(nargs=nargs, **kw)

    def __call__(self, parser, namespace, values, option_string=None):
        response = requests.get(
            API_URL + "/cloud/byPath",
            headers=auth_headers())
        print(json.dumps(response.json(), indent=4))


class MeAction(argparse.Action):
    def __init__(self, nargs=0, **kw):
        super(MeAction, self).__init__(nargs=nargs, **kw)

    def __call__(self, parser, namespace, values, option_string=None):
        response = requests.get(
            API_URL + "/me",
            headers=auth_headers())
        print(json.dumps(response.json(), indent=4))


class TransferAction(argparse.Action):
    def __init__(self, nargs='?', **kw):
        super(TransferAction, self).__init__(nargs=nargs, **kw)

    def __call__(self, parser, namespace, values, option_string=None):
        if values:
            response = requests.post(
                API_URL + "/transfers",
                data={
                    'torrent': values},
                headers=auth_headers())
            print(json.dumps(response.json(), indent=4))
        else:
            response = requests.get(
                API_URL + "/transfers",
                headers=auth_headers())
            print(json.dumps(response.json(), indent=4))


parser = argparse.ArgumentParser(description='Bitport.io command-line client')
parser.add_argument('-a', '--auth', help='Authorize', action=AuthAction)
parser.add_argument('-c', '--cloud', help='Cloud', action=CloudAction)
parser.add_argument('-m', '--me', help='Me', action=MeAction)
parser.add_argument('-t', '--transfer', help='Transfer', action=TransferAction)

if len(sys.argv) == 1:
    parser.print_help(sys.stderr)
    sys.exit(1)

parser.parse_args()
